---
- name: Set filebeat_version to last version
  set_fact:
    filebeat_version: '{{ filebeat_last_version }}'
  when: filebeat_version.find('.x') == 1

- name: Create temporary build directory
  win_file:
    state: directory
    path: '{{ win_download_path }}'

- name: Setup path folders
  win_file:
    path: '{{ path_folder.value }}'
    state: directory
  with_dict: '{{ path }}'
  loop_control:
    loop_var: path_folder

- name: Download filebeat
  win_get_url:
    url: 'https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{{ filebeat_version }}-windows-x86_64.zip'
    dest: '{{ win_download_path }}\filebeat.zip'
    force: false
  register: download_win_package
  until: download_win_package is succeeded

- name: Unzip filebeat
  win_unzip:
    src: '{{ win_download_path }}/filebeat.zip'
    dest: '{{ win_download_path }}'
    creates: '{{ win_download_path }}/filebeat-{{ filebeat_version }}-windows-x86_64'

- name: Copy files to home directory
  win_copy:
    src: '{{ win_download_path }}/filebeat-{{ filebeat_version }}-windows-x86_64/'
    dest: '{{ path.home }}/'
    force: false
    remote_src: true
  notify: Restart filebeat win

- name: Templating filebeat configuration
  win_template:
    src: '{{ fb_path_file.src }}'
    dest: '{{ fb_path_file.dst }}'
  loop:
    - src: filebeat.yml.j2
      dst: '{{ path.config }}\filebeat.yml'
    - src: filebeat-template.bat.j2
      dst: '{{ path.home }}\filebeat.bat'
  loop_control:
    loop_var: fb_path_file
  notify: Restart filebeat win

- name: Install nssm
  win_chocolatey:
    name: nssm
    state: present

- name: Create service via nssm
  win_nssm:
    name: '{{ filebeat_service_name }}'
    application: '{{ path.home }}\filebeat.bat'
    state: present
  notify: Restart filebeat win

- name: Ensure that filebeat path present in 'Path' variable
  win_path:
    elements: '{{ path.home }}'
    state: present
    scope: machine

- name: Start a service
  win_service:
    name: '{{ filebeat_service_name }}'
    state: started
